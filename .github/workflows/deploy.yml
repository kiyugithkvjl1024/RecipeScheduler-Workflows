name: Deploy to VPS

on:
  workflow_call:
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      SSH_KNOWN_HOSTS:
        required: true
      VPS_USER:
        required: true
      VPS_HOST:
        required: true
      DATABASE_URL:
        required: true
      TEST_DATABASE_URL:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Identify deleted files
        id: deleted_files
        run: |
          echo "::set-output name=files::$(git diff --name-status ${{ github.event.before }} ${{ github.sha }} | grep '^D' | cut -f2)"

      - name: Set up SSH agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"

      - name: Debug SSH connection
        run: |
          echo "Attempting to connect to ${{ secrets.VPS_HOST }}"
          ssh -vvv -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - name: Set up SSH known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          for i in {1..5}; do
            if ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts; then
              break
            fi
            echo "Retry $i: Waiting for host resolution..."
            sleep 10
          done

      - name: Set deployment path and environment
        id: deploy_info
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "::set-output name=path::/home/recipescheduler_host/www/recipescheduler-prod"
            echo "::set-output name=env::prod"
          else
            echo "::set-output name=path::/home/recipescheduler_host/www/recipescheduler-test"
            echo "::set-output name=env::test"
          fi

      - name: Prepare deployment directory
        run: |
          if [[ "${{ github.repository }}" == *"BackEnd" ]]; then
            TARGET_DIR="backend"
          elif [[ "${{ github.repository }}" == *"FrontEnd" ]]; then
            TARGET_DIR="frontend"
          else
            echo "Unknown repository type"
            exit 1
          fi
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            mkdir -p ${{ steps.deploy_info.outputs.path }}/$TARGET_DIR
            chmod 755 ${{ steps.deploy_info.outputs.path }}/$TARGET_DIR
          "
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - name: Sync files to the server
        run: |
          if [[ "${{ github.repository }}" == *"BackEnd" ]]; then
            TARGET_DIR="backend"
          elif [[ "${{ github.repository }}" == *"FrontEnd" ]]; then
            TARGET_DIR="frontend"
          else
            echo "Unknown repository type"
            exit 1
          fi
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30" ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ steps.deploy_info.outputs.path }}/$TARGET_DIR/
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - name: Post-deployment tasks (Backend)
        if: endsWith(github.repository, 'BackEnd')
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cd ${{ steps.deploy_info.outputs.path }}/backend
            source venv/bin/activate
            pip install -r requirements.txt
            alembic upgrade head
            sudo systemctl restart recipescheduler@${{ steps.deploy_info.outputs.env }}.service
            sudo systemctl status recipescheduler@${{ steps.deploy_info.outputs.env }}.service
          "
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - name: Post-deployment tasks (Frontend)
        if: endsWith(github.repository, 'FrontEnd')
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cd ${{ steps.deploy_info.outputs.path }}/frontend
            npm install
            npm run build
          "
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
